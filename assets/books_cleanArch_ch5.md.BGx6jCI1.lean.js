import{_ as h,D as l,c as p,I as a,w as e,a4 as n,j as s,o as k,a as t}from"./chunks/framework.DtvhUNIn.js";const o="/assets/CH-UN05.BoX_ww7l.jpg",I=JSON.parse('{"title":"Chap5. OBJECT-ORIENTED PROGRAMMING 面向对象编程","description":"","frontmatter":{},"headers":[],"relativePath":"books/cleanArch/ch5.md","filePath":"books/cleanArch/ch5.md","lastUpdated":1723198909000}'),r={name:"books/cleanArch/ch5.md"},d=n("",119),c=s("p",null,"For main functions to call one of the high-level functions, it had to mention the name of the module that contained that function In C, this was a #include. In Java, it was an import statement. In C#, it was a using statement. Indeed, every caller was forced to mention the name of the module that contained the callee.",-1),E=s("blockquote",null,[s("p",null,"如你所见，main 函数为了调用高层函数，它就必须能够看到这个函数所在模块。在 C 中，我们会通过 #include 来实现，在 Java 中则通过 import 来实现，而在 C# 中则用的是 using 语句。总之，每个函数的调用方都必须要引用被调用方所在的模块。")],-1),g=s("p",null,"This requirement presented the software architect with few, if any, options. The flow of control was dictated by the behavior of the system, and the source code dependencies were dictated by that flow of control.",-1),y=s("blockquote",null,[s("p",null,"显然，这样做就导致了我们在软件架构上别无选择。在这里，系统行为决定了控制流，而控制流则决定了源代码依赖关系。")],-1),u=s("p",null,"When polymorphism is brought into play, however, something very different can happen (Figure 5.2).",-1),m=s("blockquote",null,[s("p",null,"但一旦我们使用了多态，情况就不一样了（详见图 5.2）。")],-1),F=n("",14),b=n("",13);function f(A,v,D,w,q,C){const i=l("Figures");return k(),p("div",null,[d,a(i,{figure:"5-1"},{default:e(()=>[t("Source code dependencies versus flow of control")]),_:1}),c,E,g,y,u,m,a(i,{figure:"5-2"},{default:e(()=>[t("Dependency inversion")]),_:1}),F,a(i,{figure:"5-3"},{default:e(()=>[t("The database and the user interface depend on the business rules")]),_:1}),b])}const T=h(r,[["render",f]]);export{I as __pageData,T as default};
