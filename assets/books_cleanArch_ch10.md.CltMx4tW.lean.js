import{_ as s,D as i,c as r,I as a,w as n,j as e,a as t,a4 as l,o as c}from"./chunks/framework.DtvhUNIn.js";const h="/assets/CH-UN10.Bb_LGb5_.jpg",L=JSON.parse('{"title":"Chap10. ISP: THE INTERFACE SEGREGATION PRINCIPLE ISP：接口隔离原则","description":"","frontmatter":{},"headers":[],"relativePath":"books/cleanArch/ch10.md","filePath":"books/cleanArch/ch10.md","lastUpdated":1723198909000}'),d={name:"books/cleanArch/ch10.md"},u=e("h1",{id:"chap10-isp-the-interface-segregation-principle-isp-接口隔离原则",tabindex:"-1"},[t("Chap10. ISP: THE INTERFACE SEGREGATION PRINCIPLE ISP：接口隔离原则 "),e("a",{class:"header-anchor",href:"#chap10-isp-the-interface-segregation-principle-isp-接口隔离原则","aria-label":'Permalink to "Chap10. ISP: THE INTERFACE SEGREGATION PRINCIPLE ISP：接口隔离原则"'},"​")],-1),p=e("p",null,[e("img",{src:h,alt:""})],-1),_=e("p",null,"The Interface Segregation Principle (ISP) derives its name from the diagram shown in Figure 10.1.",-1),g=e("blockquote",null,[e("p",null,"“接口隔离原则（ISP）”这个名字来自图 10.1 所示的这种软件结构。")],-1),m=e("p",null,"In the situation illustrated in Figure 10.1, there are several users who use the operations of the OPS class. Let’s assume that User1 uses only op1, User2 uses only op2, and User3 uses only op3.",-1),f=e("blockquote",null,[e("p",null,"在图 10.1 所描绘的应用中，有多个用户需要操作 OPS 类。现在，我们假设这里的 User1 只需要使用 op1，User2 只需要使用 op2，User3 只需要使用 op3。")],-1),S=e("p",null,"Now imagine that OPS is a class written in a language like Java. Clearly, in that case, the source code of User1 will inadvertently depend on op2 and op3, even though it doesn’t call them. This dependence means that a change to the source code of op2 in OPS will force User1 to be recompiled and redeployed, even though nothing that it cared about has actually changed.",-1),y=e("blockquote",null,[e("p",null,"在这种情况下，如果 OPS 类是用 Java 编程语言编写的，那么很明显，User1 虽然不需要调用 op2、op3，但在源代码层次上也与它们形成依赖关系。这种依赖意味着我们对 OPS 代码中 op2 所做的任何修改，即使不会影响到 User1 的功能，也会导致它需要被重新编译和部署。")],-1),b=e("p",null,"This problem can be resolved by segregating the operations into interfaces as shown in Figure 10.2.",-1),P=e("p",null,"Again, if we imagine that this is implemented in a statically typed language like Java, then the source code of User1 will depend on U1Ops, and op1, but will not depend on OPS. Thus a change to OPS that User1 does not care about will not cause User1 to be recompiled and redeployed.",-1),I=e("blockquote",null,[e("p",null,"这个问题可以通过将不同的操作隔离成接口来解决，具体如图 10.2 所示。同样，我们也假设这个例子是用 Java 这种静态类型语言来实现的，那么现在 User1 的源代码会依赖于 U1Ops 和 op1，但不会依赖于 OPS。这样一来，我们之后对 OPS 做的修改只要不影响到 User1 的功能，就不需要重新编译和部署 User1 了。")],-1),k=l("",12),C=e("p",null,"Now suppose that D contains features that F does not use and, therefore, that S does not care about. Changes to those features within D may well force the redeployment of F and, therefore, the redeployment of S. Even worse, a failure of one of the features within D may cause failures in F and S.",-1),T=e("blockquote",null,[e("p",null,"在这种情况下，如果 D 中包含了 F 不需要的功能，那么这些功能同样也会是 S 不需要的。而我们对 D 中的这些功能的修改将会导致 F 需要被重新部署，后者又会导致 S 的重新部署。更糟糕的是，D 中一个无关功能的错误也可能会导致 F 和 S 运行出错。")],-1),N=e("h2",{id:"conclusion-本章小结",tabindex:"-1"},[t("CONCLUSION 本章小结 "),e("a",{class:"header-anchor",href:"#conclusion-本章小结","aria-label":'Permalink to "CONCLUSION 本章小结"'},"​")],-1),E=e("p",null,"The lesson here is that depending on something that carries baggage that you don’t need can cause you troubles that you didn’t expect.",-1),w=e("blockquote",null,[e("p",null,"本章所讨论的设计原则告诉我们：任何层次的软件设计如果依赖了它并不需要的东西，就会带来意料之外的麻烦。")],-1),U=e("p",null,"We’ll explore this idea in more detail when we discuss the Common Reuse Principle in Chapter 13, “Component Cohesion.”",-1),A=e("blockquote",null,[e("p",null,"我们将会在第 13 章“组件聚合”中讨论共同复用原则的时候再来深入探讨更多相关的细节。")],-1);function v(F,q,O,D,R,x){const o=i("Figures");return c(),r("div",null,[u,p,_,g,a(o,{figure:"10-1"},{default:n(()=>[t("The Interface Segregation Principle")]),_:1}),m,f,S,y,b,P,I,a(o,{figure:"10-2"},{default:n(()=>[t("Segregated operations")]),_:1}),k,a(o,{figure:"10-3"},{default:n(()=>[t("A problematic architecture")]),_:1}),C,T,N,E,w,U,A])}const H=s(d,[["render",v]]);export{L as __pageData,H as default};
