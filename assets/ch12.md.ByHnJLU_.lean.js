import{_ as r,D as l,c as i,I as t,w as o,a4 as s,j as e,o as p,a as n}from"./chunks/framework.ffW4nm55.js";const d="/md-docs/assets/CH-UN12.Dv4dDzfB.jpg",_=JSON.parse('{"title":"Chap12. COMPONENTS 组件","description":"","frontmatter":{},"headers":[],"relativePath":"ch12.md","filePath":"ch12.md","lastUpdated":1723190884000}'),c={name:"ch12.md"},h=s("",24),u=e("p",null,"This worked fine so long as the application could fit between addresses 00008 and 17778. But soon applications grew to be larger than the space allotted for them. At that point, programmers had to split their applications into two address segments, jumping around the function library (Figure 12.2).",-1),m=e("blockquote",null,[e("p",null,"当然，只要应用程序的代码能够完全存放在地址 0000〜1777（八进制）内，这种组织方式就没有任何问题。但是，应用程序代码的大小很快就会超出这个范围。为了解决这个问题，程序员们必须将应用程序代码切分成两个不同的地址段，以跳过库函数存放的内存范围（具体如图 12.2 所示）。")],-1),b=s("",41);function g(f,y,k,w,T,q){const a=l("Figures");return p(),i("div",null,[h,t(a,{figure:"12-1"},{default:o(()=>[n("Early memory layout")]),_:1}),u,m,t(a,{figure:"12-2"},{default:o(()=>[n("Splitting the application into two address segments")]),_:1}),b])}const C=r(c,[["render",g]]);export{_ as __pageData,C as default};
