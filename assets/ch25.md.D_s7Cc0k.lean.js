import{_ as i,D as h,c as l,I as o,w as n,a4 as s,j as e,a as t,o as r}from"./chunks/framework.ffW4nm55.js";const u="/md-docs/assets/CH-UN25.CBXExdyg.jpg",H=JSON.parse('{"title":"Chap25. LAYERS AND BOUNDARIES 层次与边界","description":"","frontmatter":{},"headers":[],"relativePath":"ch25.md","filePath":"ch25.md","lastUpdated":1723186780000}'),c={name:"ch25.md"},d=s("",13),p=e("p",null,"Let’s also assume that the state of the game is maintained on some persistent store—perhaps in flash, or perhaps in the cloud, or maybe just in RAM. In any of those cases, we don’t want the game rules to know the details. So, again, we’ll create an API that the game rules can use to communicate with the data storage component.",-1),m=e("blockquote",null,[e("p",null,"同时，假设玩家在游戏中的状态会被保存在某种持久化存储介质中——有可能闪存，也有可能是某种云端存储，或只是本机内存。无论怎样，我们都并不希望游戏引擎了解这些细节。所以，我们仍然需要创建一个 API 来负责游戏的业务逻辑组件与数据存储组件之间的通信。")],-1),g=e("p",null,"We don’t want the game rules to know anything about the different kinds of data storage, so the dependencies have to be properly directed following the Dependency Rule, as shown in Figure 25.2.",-1),b=e("blockquote",null,[e("p",null,"由于我们不会希望让游戏的业务逻辑依赖于不同种类的数据存储，所以这里的设计也要合理地遵守依赖关系原则，这样的话，该游戏的结构应如图 25.2 所示。")],-1),y=e("h2",{id:"clean-architecture-可否采用整洁架构",tabindex:"-1"},[t("CLEAN ARCHITECTURE? 可否采用整洁架构 "),e("a",{class:"header-anchor",href:"#clean-architecture-可否采用整洁架构","aria-label":'Permalink to "CLEAN ARCHITECTURE? 可否采用整洁架构"'},"​")],-1),f=e("p",null,"It should be clear that we could easily apply the clean architecture approach in this context,1 with all the use cases, boundaries, entities, and corresponding data structures. But have we really found all the significant architectural boundaries?",-1),w=e("blockquote",null,[e("p",null,"很显然，这里具备了采用整洁架构方法所需要的—切，包括用例、业务实体以及对应的数据结构都有了，但我们是否已经找到了所有相应的架构边界呢？")],-1),_=e("p",null,"For example, language is not the only axis of change for the UI. We also might want to vary the mechanism by which we communicate the text. For example, we might want to use a normal shell window, or text messages, or a chat application. There are many different possibilities.",-1),T=e("blockquote",null,[e("p",null,"例如，语言并不是 UI 变更的唯一方向。我们可能还会需要变更文字输入/输出的方式。例如我们的输入/输出可以采用命令行窗口，或者用短信息，或者采用某种聊天程序。这里的可能性有很多。")],-1),k=e("p",null,"That means that there is a potential architectural boundary defined by this axis of change. Perhaps we should construct an API that crosses that boundary and isolates the language from the communications mechanism; that idea is illustrated in Figure 25.3.",-1),I=e("blockquote",null,[e("p",null,"这就意味着这类变更应该有一个对应的架构边界。也许我们需要构造一个 API，以便将语言部分与通信部分隔开，这样一来，该设计的结构应如图 25.3 所示。")],-1),v=s("",14),A=s("",11),q=s("",9),P=e("p",null,"Is this an architectural boundary? Do we need an API that separates MoveManagement from PlayerManagement? Well, let’s make this a bit more interesting and add micro-services.",-1),S=e("blockquote",null,[e("p",null,"这些究竟是否属于架构边界呢？是否需要设计一个 API 来分割 MoveManagement 和 PlayerManagement 呢？在回答这些问题之前，让我们把问题弄得更有意思一点，再往里面加上微服务吧！")],-1),R=e("p",null,"Let’s assume that we’ve got a massive multiplayer version of Hunt the Wumpus. MoveManagement is handled locally within the player’s computer, but PlayerManagement is handled by a server. PlayerManagement offers a micro-service API to all the connected MoveManagement components.",-1),x=e("blockquote",null,[e("p",null,"假设我们现在面对的是一个可以面向海量玩家的新版 Hurit The Wumpus 游戏。它的 MoveManagement 组合是由玩家的本地计算机来处理的 。而 PlayerManagement 组件则由服务端来处理。但 PlayerManagement 组件会为所有连接上它的 MoveManagement 组件提供一个微服务的 API。")],-1),E=e("p",null,"The diagram in Figure 25.7 depicts this scenario in a somewhat abbreviated fashion. The Network elements are a bit more complex than depicted—but you can probably still get the idea. A full-fledged architectural boundary exists between MoveManagement and PlayerManagement in this case.",-1),L=e("blockquote",null,[e("p",null,"在图 25.7 中，我们为该游戏绘制了一个简化版的设计图。现实中的 Network 组件通常会比图中的更复杂一些 但这里的已经足够说明情况了。在图中，可以看到 MoveManagement PlayerManagement 之间存在一个完整的系统架构边界。")],-1),G=s("",15);function N(C,M,D,U,F,W){const a=h("Figures");return r(),l("div",null,[d,o(a,{figure:"25-1"},{default:n(()=>[t("Any number of UI components can reuse the game rules")]),_:1}),p,m,g,b,o(a,{figure:"25-2"},{default:n(()=>[t("Following the Dependency Rule")]),_:1}),y,f,w,_,T,k,I,o(a,{figure:"25-3"},{default:n(()=>[t("The revised diagram")]),_:1}),v,o(a,{figure:"25-4"},{default:n(()=>[t("Simplified diagram")]),_:1}),A,o(a,{figure:"25-5"},{default:n(()=>[t("Adding a network component")]),_:1}),q,o(a,{figure:"25-6"},{default:n(()=>[t("The higher-level policy manages the player")]),_:1}),P,S,R,x,E,L,o(a,{figure:"25-7"},{default:n(()=>[t("Adding a micro-service API")]),_:1}),G])}const O=i(c,[["render",N]]);export{H as __pageData,O as default};
