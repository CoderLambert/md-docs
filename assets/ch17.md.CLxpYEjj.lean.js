import{_ as i}from"./chunks/CH-UN18.MI7H_uCP.js";import{_ as r,D as h,c as l,I as o,w as s,a4 as n,j as e,a as t,o as d}from"./chunks/framework.ffW4nm55.js";const M=JSON.parse('{"title":"Chap17. BOUNDARIES: DRAWING LINES 划分边界","description":"","frontmatter":{},"headers":[],"relativePath":"ch17.md","filePath":"ch17.md","lastUpdated":1723185624000}'),c={name:"ch17.md"},u=n("",83),p=e("p",null,"The classes and interfaces in this diagram are symbolic. In a real application, there would be many business rule classes, many database interface classes, and many database access implementations. All of them, though, would follow roughly the same pattern.",-1),b=e("blockquote",null,[e("p",null,"这里的类与接口仅仅是一个例子。在一个真实的应用程序中，将会有很多业务逻辑类、很多数据库接口类以及很多数据库访问的实现。不过，所有一切所遵循的模式应该是相似的。")],-1),m=e("p",null,"Where is the boundary line? The boundary is drawn across the inheritance relationship, just below the DatabaseInterface (Figure 17.2).",-1),f=e("blockquote",null,[e("p",null,"那么这里的边界线应该被画在哪里？边界应该穿过继承关系，在 DatabaseInterface 之下（见图 17.2）。")],-1),w=e("p",null,"Note the two arrows leaving the DatabaseAccess class. Those two arrows point away from the DatabaseAccess class. That means that none of these classes knows that the DatabaseAccess class exists.",-1),g=e("blockquote",null,[e("p",null,"请注意，DatabaseAccess 类的那两个对外的箭头。这两个箭头都指向了远离 DatabaseAccess 类的方向，这意味着它们所指向的两个类都不知道 DatabaseAccess 类的存在。")],-1),y=e("p",null,"Now let’s pull back a bit. We’ll look at the component that contains many business rules, and the component that contains the database and all its access classes (Figure 17.3).",-1),k=e("blockquote",null,[e("p",null,"下面让我们把抽象层次拉高一点，看一下包含多个业务逻辑类的组件与包含数据库及其访问类的组件之间是什么关系（见图 17.3）。")],-1),v=n("",17),q=e("p",null,"Having drawn this boundary and this arrow, we can now see that the GUI could be replaced with any other kind of interface—and the BusinessRules would not care.",-1),T=e("blockquote",null,[e("p",null,"通过这条边界线以及这个箭头，我们可以看出 GUI 可以用任何一种其他形式的界面来代替。BusinessRules 组件不需要了解这些细节。")],-1),I=e("h2",{id:"plugin-architecture-插件式架构",tabindex:"-1"},[t("PLUGIN ARCHITECTURE 插件式架构 "),e("a",{class:"header-anchor",href:"#plugin-architecture-插件式架构","aria-label":'Permalink to "PLUGIN ARCHITECTURE 插件式架构"'},"​")],-1),S=e("p",null,"Taken together, these two decisions about the database and the GUI create a kind of pattern for the addition of other components. That pattern is the same pattern that is used by systems that allow third-party plugins.",-1),_=e("blockquote",null,[e("p",null,"综上所述，我们似乎可以基于数据库和 GUI 这两个为例来建立一种向系统添加其他组件的模式。这种模式与支持第三方插件的系统模式是一样的。")],-1),A=e("p",null,"Indeed, the history of software development technology is the story of how to conveniently create plugins to establish a scalable and maintainable system architecture. The core business rules are kept separate from, and independent of, those components that are either optional or that can be implemented in many different forms (Figure 17.5).",-1),R=e("blockquote",null,[e("p",null,"事实上，软件开发技术发展的历史就是一个如何想方设法方便地增加插件，从而构建一个可扩展、可维护的系统架构的故事。系统的核心业务逻辑必须和其他组件隔离，保持独立，而这些其他组件要么是可以去掉的，要么是有多种实现的（见图 17.5）。")],-1),D=n("",11),P=n("",15);function U(W,N,B,C,O,G){const a=h("Figures");return d(),l("div",null,[u,o(a,{figure:"17-1"},{default:s(()=>[t("The database behind an interface")]),_:1}),p,b,m,f,o(a,{figure:"17-2"},{default:s(()=>[t("The boundary line")]),_:1}),w,g,y,k,o(a,{figure:"17-3"},{default:s(()=>[t("The business rules and database components")]),_:1}),v,o(a,{figure:"17-4"},{default:s(()=>[t("The boundary between GUI and BusinessRules components")]),_:1}),q,T,I,S,_,A,R,o(a,{figure:"17-5"},{default:s(()=>[t("Plugging in to the business rules")]),_:1}),D,o(a,{figure:"17-6"},{default:s(()=>[t("ReSharper depends on Visual Studio")]),_:1}),P])}const L=r(c,[["render",U]]);export{M as __pageData,L as default};
